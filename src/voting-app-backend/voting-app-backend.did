type Votes = record {
  yes: nat32;
  no: nat32;
};

type Proposal = record {
  id: text;
  title: text;
  description: text;
  image_url: opt text;
  yes_votes: nat32;
  no_votes: nat32;
  created_at: nat64;
  duration_days: nat32;
  time_left: opt text;
  status: opt text;
  total_voters: opt nat32;
  full_description: opt text;
  image: opt text;
  votes: opt Votes;
  author: opt text;
  category: opt text;
  discussions: opt nat32;
  voters: vec principal;
  user_id: opt text;
};



type VoteResult = variant { Ok: null; Err: text };
type VoteChoice = variant { Yes; No };
type ProposalStats = record {
  total_proposals: nat64;
  total_yes_votes: nat64;
  total_no_votes: nat64;
  total_votes: nat64;
};

type ChatTurn = record {
  role: text;
  content: text;
};


service : {
  add_proposal_with_prompt: (text, opt text, nat32, opt text, opt text, opt text, opt text) -> (text);
  add_proposal: (text, text, opt text, nat32, opt text, opt text, opt text, opt text, opt text) -> (text);
  get_proposals: () -> (vec Proposal) query;
  get_proposal_by_id: (text) -> (opt Proposal) query;
  get_proposal_by_user_id: (text) -> (vec Proposal) query;
  get_proposal_stats: () -> (ProposalStats) query;
  vote_proposal: (text, text, VoteChoice) -> (VoteResult);
  delete_proposal: (text) -> (VoteResult);
  get_users: () -> (vec record { id: text; image_url: opt text; fullname: text; email: text; location: opt text; website: opt text; bio: opt text; }) query;
  prompting: (text) -> (text);
  create_profile: (opt text, text, text, opt text, opt text, opt text) -> (text);
  chat_ai: (vec ChatTurn) -> (text);
}
