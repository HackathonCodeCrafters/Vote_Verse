"use client";

import { useDarkMode } from "@/context/DarkModeContext";
import Button from "@/shared/components/Button";
import { Lightbulb, Loader2, Sparkles } from "lucide-react";
import { useMemo, useState } from "react";
import { voting_app_backend as backend } from "../../../../../../declarations/voting-app-backend";

type Defaults = {
  principal?: string; // user_id
  author?: string | null;
  category?: string | null; // e.g. "Governance"
  durationDays?: number | null; // e.g. 7
  image?: string | null; // can be data:... or https://...
};

interface AgentAICardProps {
  /** optional default values pulled from Create form */
  defaults?: Defaults;
  /** called when canister returns a new proposal id */
  onCreated?: (proposalId: string) => void;
}

// Candid Option<T> -> [] | [T]
const Opt = <T,>(v: T | null | undefined): [] | [T] =>
  v === null || v === undefined || (typeof v === "string" && v.trim() === "")
    ? []
    : [v];

export default function AgentAICard({ defaults, onCreated }: AgentAICardProps) {
  const { darkMode } = useDarkMode();

  const [prompt, setPrompt] = useState<string>("");
  const [useFormValues, setUseFormValues] = useState<boolean>(true);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [errorMsg, setErrorMsg] = useState<string>("");

  const resolved = useMemo(() => {
    // normalize defaults & split image -> (image_url | image data)
    const category = (defaults?.category ?? "Governance") || "Governance";
    const durationDays = Number(defaults?.durationDays ?? 7);
    const author = defaults?.author ?? "";
    const user_id = defaults?.principal ?? "";

    const img = defaults?.image ?? "";
    const image_url = img && !img.startsWith("data:") ? img : "";
    const image = img && img.startsWith("data:") ? img : "";

    return { category, durationDays, author, user_id, image_url, image };
  }, [defaults]);

  const cardBg = darkMode
    ? "bg-gray-800 border-gray-700"
    : "bg-white border-gray-200";
  const textMuted = darkMode ? "text-gray-300" : "text-gray-600";

  // helper: pastikan selalu kirim JSON valid utk dev/local
  const toDevJSONPayload = (raw: string) => {
    // kalau user sudah menempel JSON valid, pakai apa adanya
    try {
      JSON.parse(raw);
      return raw;
    } catch (_e) {
      // bungkus jadi JSON valid
      const firstSentence =
        raw
          .split(/[\.\n\r!?]/)[0]
          ?.trim()
          .slice(0, 80) || "AI Draft Proposal";
      const short = raw.trim().slice(0, 180) || "Auto generated by dev mode";
      return JSON.stringify({
        title: `AI Draft: ${firstSentence}`,
        description: short,
        full_description: raw,
      });
    }
  };

  const callGenerate = async () => {
    setErrorMsg("");
    if (!prompt.trim()) {
      setErrorMsg("Please write a short prompt/idea first.");
      return;
    }

    setIsLoading(true);
    try {
      // params ke canister (respect checkbox)
      const category = useFormValues ? resolved.category : "Governance";
      const durationDays = useFormValues ? resolved.durationDays : 7;
      const author = useFormValues ? resolved.author : "";
      const user_id = useFormValues ? resolved.user_id : "";
      const image_url = useFormValues ? resolved.image_url : "";
      const image = useFormValues ? resolved.image : "";

      // ⬅️ ini kuncinya: pastikan prompt payload berupa JSON valid
      const payload = toDevJSONPayload(prompt);

      const returned = await backend.add_proposal_with_prompt(
        payload,
        image_url,
        durationDays,
        category,
        image,
        author,
        user_id
      );

      const looksOk =
        typeof returned === "string" &&
        returned.trim().length > 0 &&
        !/\s{2,}/.test(returned);

      if (!looksOk || /error|failed|parse/i.test(returned)) {
        setErrorMsg(`Generation failed: ${returned}`);
        return;
      }

      onCreated?.(returned.trim());
    } catch (e: any) {
      setErrorMsg(e?.message || "Failed to call AI generator.");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className={`rounded-lg border p-5 ${cardBg}`}>
      {/* Header */}
      <div className="flex items-center gap-2 mb-3">
        <Lightbulb
          className={`w-5 h-5 ${
            darkMode ? "text-yellow-300" : "text-yellow-500"
          }`}
        />
        <h3
          className={
            darkMode
              ? "text-white font-semibold"
              : "text-gray-900 font-semibold"
          }
        >
          AI Governance Agent
        </h3>
        <span className="ml-auto text-xs rounded-full px-2 py-0.5 bg-purple-500/20 text-purple-300 border border-purple-500/30">
          ICP
        </span>
      </div>

      <p className={`text-sm mb-4 ${textMuted}`}>
        Paste a brief idea or problem statement. The AI will draft a complete
        proposal and create it instantly.
      </p>

      {/* Prompt input */}
      <div className="space-y-2 mb-3">
        <label
          className={`text-sm ${darkMode ? "text-gray-200" : "text-gray-800"}`}
        >
          Your Idea / Prompt
        </label>
        <textarea
          rows={5}
          value={prompt}
          onChange={(e) => setPrompt(e.target.value)}
          placeholder="e.g., Implement dynamic staking rewards that adjust with validator performance and network participation..."
          className={`w-full rounded-lg px-3 py-2 border focus:outline-none ${
            darkMode
              ? "bg-gray-700 border-gray-600 text-white placeholder:text-gray-400 focus:border-purple-500"
              : "bg-white border-gray-300 text-gray-900 placeholder:text-gray-500 focus:border-purple-500"
          }`}
        />
      </div>

      {/* Use form values */}
      <label className="inline-flex items-center gap-2 text-sm mb-4 cursor-pointer">
        <input
          type="checkbox"
          checked={useFormValues}
          onChange={(e) => setUseFormValues(e.target.checked)}
          className="h-4 w-4"
        />
        <span className={textMuted}>
          Use current form values (category, duration, author, image, principal)
        </span>
      </label>

      {/* Error */}
      {errorMsg && (
        <div
          className={`mb-4 text-sm px-3 py-2 rounded border ${
            darkMode
              ? "border-red-800 bg-red-900/30 text-red-200"
              : "border-red-200 bg-red-50 text-red-700"
          }`}
        >
          {errorMsg}
        </div>
      )}

      {/* Action */}
      <Button
        onClick={callGenerate}
        disabled={isLoading}
        variant="gradient"
        className="w-full"
      >
        {isLoading ? (
          <span className="inline-flex items-center gap-2">
            <Loader2 className="w-4 h-4 animate-spin" />
            Generating & Creating...
          </span>
        ) : (
          <span className="inline-flex items-center gap-2">
            <Sparkles className="w-4 h-4" />
            Generate Proposal with AI
          </span>
        )}
      </Button>

      {/* Footnote */}
      <p className={`text-[11px] mt-3 ${textMuted}`}>
        Powered by on-chain LLM. Output is stored as a proposal if JSON is
        valid.
      </p>
    </div>
  );
}
